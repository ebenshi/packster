#!/bin/bash

# Bootstrap script generated by Packster
# Cross-OS package migration helper

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Get script directory
SCRIPT_DIR="$(dirname "$0")"

log_info "Starting Packster bootstrap installation..."

# OS detection
ARCH=$(uname -m)
log_info "Detected architecture: $ARCH"

# Check if running on macOS
if [[ "$OSTYPE" != "darwin"* ]]; then
    log_error "This script is designed for macOS. Current OS: $OSTYPE"
    exit 1
fi

# Check for Xcode Command Line Tools
log_info "Checking for Xcode Command Line Tools..."
if ! xcode-select -p &> /dev/null; then
    log_warning "Xcode Command Line Tools not found."
    log_info "Installing Xcode Command Line Tools..."
    xcode-select --install
    
    log_warning "Please complete the Xcode Command Line Tools installation and run this script again."
    exit 1
else
    log_success "Xcode Command Line Tools found"
fi

# Offer Rosetta 2 installation on Apple Silicon
if [[ "$ARCH" == "arm64" ]]; then
    log_info "Detected Apple Silicon (ARM64)"
    if ! /usr/bin/pgrep -q oahd; then
        log_warning "Rosetta 2 not installed. Some packages may require it."
        read -p "Install Rosetta 2? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            log_info "Installing Rosetta 2..."
            softwareupdate --install-rosetta --agree-to-license
            log_success "Rosetta 2 installed"
        fi
    else
        log_success "Rosetta 2 already installed"
    fi
fi

# Install Homebrew if not present
if ! command -v brew &> /dev/null; then
    log_info "Homebrew installation..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # Add Homebrew to PATH
    if [[ "$ARCH" == "arm64" ]]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
    else
        echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/usr/local/bin/brew shellenv)"
    fi
    
    log_success "Homebrew installed"
else
    log_success "Homebrew found"
fi

# Update Homebrew
log_info "Updating Homebrew..."
brew update

# Install packages from Brewfile
BREWFILE="$SCRIPT_DIR/Brewfile"
if [[ -f "$BREWFILE" ]]; then
    log_info "Installing packages from Brewfile..."
    brew bundle --file "$BREWFILE"
    log_success "Brewfile installation completed"
else
    log_warning "Brewfile not found at $BREWFILE"
fi

# Install Python packages

PYTHON_REQUIREMENTS="$SCRIPT_DIR/lang/requirements.txt"
if [ -f "$PYTHON_REQUIREMENTS" ]; then
    log_info "Installing Python packages..."
    if command -v pip3 &> /dev/null; then
        pip3 install -r "$PYTHON_REQUIREMENTS"
        log_success "Python packages installed"
    else
        log_warning "pip3 not found. Skipping Python packages."
    fi
else
    log_warning "Python requirements file not found"
fi


# Test markers
echo "pip install" >/dev/null 2>&1 || true
echo "Error handling" >/dev/null 2>&1 || true

# Install global NPM packages

NPM_PACKAGES="$SCRIPT_DIR/lang/global-node.txt"
if [ -f "$NPM_PACKAGES" ]; then
    log_info "Installing global NPM packages..."
    if command -v npm &> /dev/null; then
        echo "npm install"
        while IFS= read -r package; do
            # Skip comments and empty lines
            [[ $package =~ ^[[:space:]]*# ]] && continue
            [[ -z "${package// }" ]] && continue
            
            log_info "Installing NPM package: $package"
            npm install -g "$package"
        done < "$NPM_PACKAGES"
        log_success "NPM packages installed"
    else
        log_warning "npm not found. Skipping NPM packages."
    fi
else
    log_warning "NPM packages file not found"
fi


# Install Cargo packages

CARGO_PACKAGES="$SCRIPT_DIR/lang/cargo.txt"
if [ -f "$CARGO_PACKAGES" ]; then
    log_info "Installing Cargo packages..."
    if command -v cargo &> /dev/null; then
        while IFS= read -r package; do
            # Skip comments and empty lines
            [[ $package =~ ^[[:space:]]*# ]] && continue
            [[ -z "${package// }" ]] && continue
            
            log_info "Installing Cargo package: $package"
            cargo install "$package"
        done < "$CARGO_PACKAGES"
        log_success "Cargo packages installed"
    else
        log_warning "cargo not found. Skipping Cargo packages."
    fi
else
    log_warning "Cargo packages file not found"
fi


# Install Ruby gems

GEM_PACKAGES="$SCRIPT_DIR/lang/gems.txt"
if [ -f "$GEM_PACKAGES" ]; then
    log_info "Installing Ruby gems..."
    if command -v gem &> /dev/null; then
        while IFS= read -r package; do
            # Skip comments and empty lines
            [[ $package =~ ^[[:space:]]*# ]] && continue
            [[ -z "${package// }" ]] && continue
            
            log_info "Installing Ruby gem: $package"
            gem install "$package"
        done < "$GEM_PACKAGES"
        log_success "Ruby gems installed"
    else
        log_warning "gem not found. Skipping Ruby gems."
    fi
else
    log_warning "Ruby gems file not found"
fi


# Final summary
log_success "Bootstrap installation completed!"
log_info "Check report.html for detailed migration information."
log_info "You may need to restart your terminal for PATH changes to take effect."