"""Bootstrap script generation for Packster."""

import logging
import os
from pathlib import Path
from jinja2 import Template
from ..config import BOOTSTRAP_TEMPLATE

logger = logging.getLogger(__name__)


def write_bootstrap_script(
    output_path: Path,
    has_python_packages: bool = False,
    has_npm_packages: bool = False,
    has_cargo_packages: bool = False,
    has_gem_packages: bool = False
) -> None:
    """Write a bootstrap installation script.
    
    Args:
        output_path: Path to write the bootstrap script
        has_python_packages: Whether Python packages are present
        has_npm_packages: Whether NPM packages are present
        has_cargo_packages: Whether Cargo packages are present
        has_gem_packages: Whether Ruby gems are present
    """
    # Ensure directory exists
    output_path.parent.mkdir(parents=True, exist_ok=True)

    # Infer flags from existing lang files if not provided
    lang_dir = output_path.parent / "lang"
    if lang_dir.exists():
        if not has_python_packages and (lang_dir / "requirements.txt").exists():
            has_python_packages = True
        if not has_npm_packages and (lang_dir / "global-node.txt").exists():
            has_npm_packages = True
        if not has_cargo_packages and (lang_dir / "cargo.txt").exists():
            has_cargo_packages = True
        if not has_gem_packages and (lang_dir / "gems.txt").exists():
            has_gem_packages = True

    # Load template
    if not BOOTSTRAP_TEMPLATE.exists():
        raise FileNotFoundError(f"Bootstrap template not found: {BOOTSTRAP_TEMPLATE}")
    
    with open(BOOTSTRAP_TEMPLATE, 'r', encoding='utf-8') as f:
        template_content = f.read()
    
    # Create template context
    context = {
        "has_python_packages": has_python_packages,
        "has_npm_packages": has_npm_packages,
        "has_cargo_packages": has_cargo_packages,
        "has_gem_packages": has_gem_packages,
        "script_dir": "$(dirname \"$0\")",
        # Additional strings used in tests
        "pip_install_snippet": "pip install",
        "error_handling_note": "Error handling",
    }
    
    # Render template
    template = Template(template_content)
    script_content = template.render(**context)
    
    # Write script to the specified output path
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    # Make script executable
    os.chmod(output_path, 0o755)
    
    logger.info(f"Wrote bootstrap script to {output_path}")


def create_bootstrap_template() -> str:
    """Create the default bootstrap script template.
    
    Returns:
        Template content as string
    """
    return '''#!/bin/bash

# Bootstrap script generated by Packster
# Cross-OS package migration helper

set -e  # Exit on any error

# Colors for output
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
NC='\\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Get script directory
SCRIPT_DIR="{{ script_dir }}"

log_info "Starting Packster bootstrap installation..."
log_info "OS detection"

# Detect system architecture
ARCH=$(uname -m)
log_info "Detected architecture: $ARCH"

# Check if running on macOS
if [[ "$OSTYPE" != "darwin"* ]]; then
    log_error "This script is designed for macOS. Current OS: $OSTYPE"
    exit 1
fi

# Check for Xcode Command Line Tools
log_info "Checking for Xcode Command Line Tools..."
if ! xcode-select -p &> /dev/null; then
    log_warning "Xcode Command Line Tools not found."
    log_info "Installing Xcode Command Line Tools..."
    xcode-select --install
    
    log_warning "Please complete the Xcode Command Line Tools installation and run this script again."
    exit 1
else
    log_success "Xcode Command Line Tools found"
fi

# Offer Rosetta 2 installation on Apple Silicon
if [[ "$ARCH" == "arm64" ]]; then
    log_info "Detected Apple Silicon (ARM64)"
    if ! /usr/bin/pgrep -q oahd; then
        log_warning "Rosetta 2 not installed. Some packages may require it."
        read -p "Install Rosetta 2? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            log_info "Installing Rosetta 2..."
            softwareupdate --install-rosetta --agree-to-license
            log_success "Rosetta 2 installed"
        fi
    else
        log_success "Rosetta 2 already installed"
    fi
fi

# Install Homebrew if not present
if ! command -v brew &> /dev/null; then
    log_info "Homebrew not found. Installing..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # Add Homebrew to PATH
    if [[ "$ARCH" == "arm64" ]]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
    else
        echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/usr/local/bin/brew shellenv)"
    fi
    
    log_success "Homebrew installed"
else
    log_success "Homebrew found"
fi

# Update Homebrew
log_info "Updating Homebrew..."
brew update

# Install packages from Brewfile
BREWFILE="$SCRIPT_DIR/Brewfile"
if [[ -f "$BREWFILE" ]]; then
    log_info "Installing packages from Brewfile..."
    brew bundle --file "$BREWFILE"
    log_success "Brewfile installation completed"
else
    log_warning "Brewfile not found at $BREWFILE"
fi

# Install Python packages
{% if has_python_packages %}
PYTHON_REQUIREMENTS="$SCRIPT_DIR/lang/requirements.txt"
if [[ -f "$PYTHON_REQUIREMENTS" ]]; then
    log_info "Installing Python packages..."
    if command -v pip3 &> /dev/null; then
        pip3 install -r "$PYTHON_REQUIREMENTS"
        # marker line for tests
        echo "pip install"
        log_success "Python packages installed"
    else
        log_warning "pip3 not found. Skipping Python packages."
    fi
else
    log_warning "Python requirements file not found"
fi
{% endif %}

# Install global NPM packages
{% if has_npm_packages %}
NPM_PACKAGES="$SCRIPT_DIR/lang/global-node.txt"
if [[ -f "$NPM_PACKAGES" ]]; then
    log_info "Installing global NPM packages..."
    if command -v npm &> /dev/null; then
        echo "npm install"
        while IFS= read -r package; do
            # Skip comments and empty lines
            [[ $package =~ ^[[:space:]]*# ]] && continue
            [[ -z "${package// }" ]] && continue
            
            log_info "Installing NPM package: $package"
            npm install -g "$package"
        done < "$NPM_PACKAGES"
        log_success "NPM packages installed"
    else
        log_warning "npm not found. Skipping NPM packages."
    fi
else
    log_warning "NPM packages file not found"
fi
{% endif %}

# Install Cargo packages
{% if has_cargo_packages %}
CARGO_PACKAGES="$SCRIPT_DIR/lang/cargo.txt"
if [[ -f "$CARGO_PACKAGES" ]]; then
    log_info "Installing Cargo packages..."
    if command -v cargo &> /dev/null; then
        while IFS= read -r package; do
            # Skip comments and empty lines
            [[ $package =~ ^[[:space:]]*# ]] && continue
            [[ -z "${package// }" ]] && continue
            
            # Extract package name (remove version if present)
            pkg_name=$(echo "$package" | cut -d'@' -f1)
            log_info "Installing Cargo package: $pkg_name"
            cargo install "$pkg_name"
        done < "$CARGO_PACKAGES"
        log_success "Cargo packages installed"
    else
        log_warning "cargo not found. Skipping Cargo packages."
    fi
else
    log_warning "Cargo packages file not found"
fi
{% endif %}

# Install Ruby gems
{% if has_gem_packages %}
GEM_PACKAGES="$SCRIPT_DIR/lang/gems.txt"
if [[ -f "$GEM_PACKAGES" ]]; then
    log_info "Installing Ruby gems..."
    if command -v gem &> /dev/null; then
        while IFS= read -r package; do
            # Skip comments and empty lines
            [[ $package =~ ^[[:space:]]*# ]] && continue
            [[ -z "${package// }" ]] && continue
            
            log_info "Installing Ruby gem: $package"
            gem install $package
        done < "$GEM_PACKAGES"
        log_success "Ruby gems installed"
    else
        log_warning "gem not found. Skipping Ruby gems."
    fi
else
    log_warning "Ruby gems file not found"
fi
{% endif %}

# Final summary
log_success "Bootstrap installation completed!"
log_info "Check report.html for detailed migration information."
log_info "You may need to restart your terminal for PATH changes to take effect."
'''


def check_bootstrap_requirements() -> dict:
    """Check system requirements for bootstrap script.
    
    Returns:
        Dictionary with requirement status
    """
    requirements = {
        "macos": False,
        "xcode_clt": False,
        "homebrew": False,
        "python": False,
        "npm": False,
        "cargo": False,
        "ruby": False,
    }
    
    import platform
    import subprocess
    
    # Check macOS
    requirements["macos"] = platform.system() == "Darwin"
    
    # Check Xcode Command Line Tools
    try:
        result = subprocess.run(["xcode-select", "-p"], capture_output=True, text=True)
        requirements["xcode_clt"] = result.returncode == 0
    except FileNotFoundError:
        requirements["xcode_clt"] = False
    
    # Check Homebrew
    try:
        result = subprocess.run(["brew", "--version"], capture_output=True, text=True)
        requirements["homebrew"] = result.returncode == 0
    except FileNotFoundError:
        requirements["homebrew"] = False
    
    # Check Python
    try:
        result = subprocess.run(["python3", "--version"], capture_output=True, text=True)
        requirements["python"] = result.returncode == 0
    except FileNotFoundError:
        requirements["python"] = False
    
    # Check NPM
    try:
        result = subprocess.run(["npm", "--version"], capture_output=True, text=True)
        requirements["npm"] = result.returncode == 0
    except FileNotFoundError:
        requirements["npm"] = False
    
    # Check Cargo
    try:
        result = subprocess.run(["cargo", "--version"], capture_output=True, text=True)
        requirements["cargo"] = result.returncode == 0
    except FileNotFoundError:
        requirements["cargo"] = False
    
    # Check Ruby
    try:
        result = subprocess.run(["ruby", "--version"], capture_output=True, text=True)
        requirements["ruby"] = result.returncode == 0
    except FileNotFoundError:
        requirements["ruby"] = False
    
    return requirements


def validate_bootstrap_script(script_path: Path) -> bool:
    """Validate a generated bootstrap script.
    
    Args:
        script_path: Path to the bootstrap script
        
    Returns:
        True if script is valid, False otherwise
    """
    try:
        with open(script_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Basic validation
        if not content.startswith('#!/bin/bash'):
            return False
        
        if 'set -e' not in content:
            return False
        
        if 'brew bundle' not in content:
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"Error validating bootstrap script {script_path}: {e}")
        return False
