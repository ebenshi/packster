"""Prompt templates for Claude AI package migration."""

from typing import List, Dict, Any


def create_migration_prompt(packages: List[Dict[str, Any]]) -> str:
    """Create a prompt for Claude to analyze packages and generate installation commands.
    
    Args:
        packages: List of package dictionaries from the report
        
    Returns:
        Formatted prompt string for Claude
    """
    
    # Format packages for the prompt - more compact
    package_list = []
    for pkg in packages:
        source_name = pkg.get("source", {}).get("source_name", "unknown")
        source_pm = pkg.get("source", {}).get("source_pm", "unknown")
        decision = pkg.get("decision", "unknown")
        notes = pkg.get("notes", "")
        package_list.append(f"{source_name} ({source_pm}) - {decision} - {notes}")
    
    package_text = "\n".join(package_list)
    
    prompt = f"""Migrate {len(packages)} Ubuntu packages to macOS. Determine installability and provide exact commands.

Installation priority: Homebrew > Homebrew Cask > MacPorts > Direct > Built-in

Return JSON:
{{
  "installable_packages": [
    {{
      "original_name": "name",
      "macos_name": "macos_name",
      "installation_method": "homebrew|homebrew_cask|macports|direct|builtin",
      "command": "command",
      "notes": "notes"
    }}
  ],
  "unavailable_packages": [
    {{
      "original_name": "name",
      "reason": "reason",
      "alternatives": ["alt1", "alt2"],
      "notes": "notes"
    }}
  ],
  "installation_script": "#!/bin/bash\\n# Generated by Claude AI\\nbrew install pkg1 pkg2\\nbrew install --cask cask1\\nsudo port install port1\\n# Manual steps..."
}}

Packages: {package_text}"""
    
    return prompt


def create_validation_prompt(package_name: str, suggested_command: str) -> str:
    """Create a prompt to validate a specific package mapping.
    
    Args:
        package_name: Original package name
        suggested_command: Suggested installation command
        
    Returns:
        Validation prompt string
    """
    
    prompt = f"""You are validating a package migration suggestion.

ORIGINAL PACKAGE: {package_name}
SUGGESTED COMMAND: {suggested_command}

Please validate this mapping:
1. Is this the correct macOS equivalent?
2. Is this the best installation method?
3. Will this provide the same functionality as the original package?

Respond with:
- "VALID" if the mapping is correct
- "INVALID" if it's incorrect, with a brief explanation
- "ALTERNATIVE: <better_command>" if there's a better option

Keep your response concise."""
    
    return prompt
