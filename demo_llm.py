#!/usr/bin/env python3
"""Demo script for LLM-powered package migration."""

import json
import sys
from pathlib import Path

# Add the current directory to Python path
sys.path.insert(0, str(Path(__file__).parent))

from packster.llm import ClaudeMigrator
from packster.llm.prompts import create_migration_prompt


def load_sample_packages():
    """Load sample packages from the existing report."""
    report_path = Path("./packster-out/report.json")
    
    if not report_path.exists():
        print(f"❌ Report file not found: {report_path}")
        print("💡 Run 'packster generate' first to create a report")
        return None
    
    try:
        with open(report_path, 'r') as f:
            report_data = json.load(f)
        
        packages = report_data.get("mapping_results", [])
        if not packages:
            print("❌ No packages found in report")
            return None
        
        print(f"✅ Loaded {len(packages)} packages from report")
        return packages
        
    except Exception as e:
        print(f"❌ Failed to load report: {e}")
        return None


def demo_prompt_generation(packages):
    """Demo the prompt generation."""
    print("\n🤖 Demo: Prompt Generation")
    print("=" * 50)
    
    # Take first 5 packages for demo
    demo_packages = packages[:5]
    
    prompt = create_migration_prompt(demo_packages)
    
    print(f"Generated prompt for {len(demo_packages)} packages:")
    print("-" * 30)
    print(prompt[:500] + "..." if len(prompt) > 500 else prompt)
    print("-" * 30)
    
    return prompt


def demo_without_api(packages):
    """Demo the system without making API calls."""
    print("\n🧪 Demo: System Components (No API)")
    print("=" * 50)
    
    # Test with a mock response
    mock_response = '''
    {
      "installable_packages": [
        {
          "original_name": "git",
          "macos_name": "git",
          "installation_method": "homebrew",
          "command": "brew install git",
          "notes": "Git version control system"
        },
        {
          "original_name": "docker.io",
          "macos_name": "docker",
          "installation_method": "homebrew_cask",
          "command": "brew install --cask docker",
          "notes": "Docker Desktop for Mac"
        },
        {
          "original_name": "curl",
          "macos_name": "curl",
          "installation_method": "homebrew",
          "command": "brew install curl",
          "notes": "Command line tool for transferring data"
        }
      ],
      "unavailable_packages": [
        {
          "original_name": "apt-transport-https",
          "reason": "APT-specific package, not needed on macOS",
          "alternatives": ["macOS uses different package management"],
          "notes": "This is a Linux package manager component"
        },
        {
          "original_name": "init",
          "reason": "Linux system initialization package",
          "alternatives": ["macOS has built-in system initialization"],
          "notes": "Not applicable to macOS"
        }
      ],
      "installation_script": "#!/bin/bash\\n\\n# Generated by Claude AI\\n\\n# Install Homebrew packages\\nbrew install git curl\\n\\n# Install Homebrew casks\\nbrew install --cask docker\\n\\n# Built-in equivalents\\necho 'Note: apt-transport-https and init are not needed on macOS'"
    }
    '''
    
    from packster.llm.parser import parse_migration_response, generate_installation_script, generate_unavailable_report
    
    try:
        parsed = parse_migration_response(mock_response)
        print("✅ Successfully parsed mock response")
        
        # Generate installation script
        script = generate_installation_script(parsed)
        print("\n📜 Generated Installation Script:")
        print("-" * 30)
        print(script)
        print("-" * 30)
        
        # Generate unavailable report
        report = generate_unavailable_report(parsed)
        print("\n📋 Unavailable Packages Report:")
        print("-" * 30)
        print(report)
        print("-" * 30)
        
        # Show summary
        summary = {
            "total_packages": len(parsed["installable_packages"]) + len(parsed["unavailable_packages"]),
            "installable_count": len(parsed["installable_packages"]),
            "unavailable_count": len(parsed["unavailable_packages"]),
            "success_rate": len(parsed["installable_packages"]) / (len(parsed["installable_packages"]) + len(parsed["unavailable_packages"])) * 100
        }
        
        print(f"\n📊 Summary:")
        print(f"  • Total packages: {summary['total_packages']}")
        print(f"  • Installable: {summary['installable_count']}")
        print(f"  • Unavailable: {summary['unavailable_count']}")
        print(f"  • Success rate: {summary['success_rate']:.1f}%")
        
    except Exception as e:
        print(f"❌ Demo failed: {e}")


def main():
    """Main demo function."""
    print("🚀 Packster LLM Migration Demo")
    print("=" * 50)
    
    # Load packages
    packages = load_sample_packages()
    if not packages:
        return
    
    # Demo prompt generation
    demo_prompt_generation(packages)
    
    # Demo system components without API
    demo_without_api(packages)
    
    print("\n🎉 Demo completed!")
    print("\n💡 To use with real Claude API:")
    print("   1. Get a Claude API key from https://console.anthropic.com/")
    print("   2. Run: packster llm-migrate --api-key YOUR_KEY")
    print("   3. Or use the Python API directly")


if __name__ == "__main__":
    main()
