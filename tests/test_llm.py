"""Tests for LLM-powered package migration."""

import json
import pytest
from pathlib import Path
from unittest.mock import Mock, patch

from packster.llm.prompts import create_migration_prompt
from packster.llm.parser import parse_migration_response, generate_installation_script
from packster.llm.claude import ClaudeMigrator


class TestPrompts:
    """Test prompt generation."""
    
    def test_create_migration_prompt(self):
        """Test that migration prompt is created correctly."""
        packages = [
            {
                "source": {"source_name": "git", "source_pm": "apt"},
                "decision": "manual"
            },
            {
                "source": {"source_name": "docker.io", "source_pm": "apt"},
                "decision": "manual"
            }
        ]
        
        prompt = create_migration_prompt(packages)
        
        assert "git (apt)" in prompt
        assert "docker.io (apt)" in prompt
        assert "Migrate 2 Ubuntu packages" in prompt
        assert "JSON" in prompt


class TestParser:
    """Test response parsing."""
    
    def test_parse_migration_response_valid(self):
        """Test parsing a valid Claude response."""
        response = '''
        Here's the analysis:
        
        {
          "installable_packages": [
            {
              "original_name": "git",
              "macos_name": "git",
              "installation_method": "homebrew",
              "command": "brew install git",
              "notes": "Git version control system"
            }
          ],
          "unavailable_packages": [
            {
              "original_name": "linux-specific-pkg",
              "reason": "Linux-specific package",
              "alternatives": ["macos-equivalent"],
              "notes": "No direct equivalent"
            }
          ],
          "installation_script": "#!/bin/bash\\nbrew install git"
        }
        '''
        
        parsed = parse_migration_response(response)
        
        assert "installable_packages" in parsed
        assert "unavailable_packages" in parsed
        assert "installation_script" in parsed
        assert len(parsed["installable_packages"]) == 1
        assert len(parsed["unavailable_packages"]) == 1
    
    def test_parse_migration_response_invalid_json(self):
        """Test parsing invalid JSON response."""
        response = "This is not JSON"
        
        with pytest.raises(ValueError, match="No valid JSON found"):
            parse_migration_response(response)
    
    def test_generate_installation_script(self):
        """Test installation script generation."""
        parsed_response = {
            "installable_packages": [
                {
                    "original_name": "git",
                    "macos_name": "git",
                    "installation_method": "homebrew",
                    "command": "brew install git",
                    "notes": "Git version control"
                },
                {
                    "original_name": "docker",
                    "macos_name": "docker",
                    "installation_method": "homebrew_cask",
                    "command": "brew install --cask docker",
                    "notes": "Docker Desktop"
                }
            ],
            "unavailable_packages": [],
            "installation_script": None
        }
        
        script = generate_installation_script(parsed_response)
        
        assert "#!/bin/bash" in script
        assert "brew install git" in script
        assert "brew install --cask docker" in script
        assert "Generated by Packster with Claude AI" in script


class TestClaudeMigrator:
    """Test Claude migrator."""
    
    @patch('packster.llm.claude.Anthropic')
    def test_claude_migrator_init(self, mock_anthropic):
        """Test Claude migrator initialization."""
        mock_client = Mock()
        mock_anthropic.return_value = mock_client
        
        migrator = ClaudeMigrator("test-api-key", "claude-3-5-sonnet-20241022")
        
        assert migrator.model == "claude-3-5-sonnet-20241022"
        mock_anthropic.assert_called_once_with(api_key="test-api-key")
    
    @patch('packster.llm.claude.Anthropic')
    def test_migrate_packages_success(self, mock_anthropic):
        """Test successful package migration."""
        # Mock the Claude client
        mock_client = Mock()
        mock_message = Mock()
        mock_message.content = [Mock()]
        mock_message.content[0].text = '''
        {
          "installable_packages": [
            {
              "original_name": "git",
              "macos_name": "git",
              "installation_method": "homebrew",
              "command": "brew install git",
              "notes": "Git version control"
            }
          ],
          "unavailable_packages": [],
          "installation_script": "#!/bin/bash\\nbrew install git"
        }
        '''
        mock_client.messages.create.return_value = mock_message
        mock_anthropic.return_value = mock_client
        
        migrator = ClaudeMigrator("test-api-key")
        
        packages = [
            {
                "source": {"source_name": "git", "source_pm": "apt"},
                "decision": "manual"
            }
        ]
        
        results = migrator.migrate_packages(packages)
        
        assert results["success"] is True
        assert "parsed_response" in results
        assert "summary" in results
        assert results["summary"]["installable_count"] == 1
        assert results["summary"]["unavailable_count"] == 0
    
    @patch('packster.llm.claude.Anthropic')
    def test_migrate_packages_failure(self, mock_anthropic):
        """Test failed package migration."""
        # Mock the Claude client to raise an exception
        mock_client = Mock()
        mock_client.messages.create.side_effect = Exception("API Error")
        mock_anthropic.return_value = mock_client
        
        migrator = ClaudeMigrator("test-api-key")
        
        packages = [
            {
                "source": {"source_name": "git", "source_pm": "apt"},
                "decision": "manual"
            }
        ]
        
        results = migrator.migrate_packages(packages)
        
        assert results["success"] is False
        assert "error" in results
        assert "API Error" in results["error"]


def test_integration_with_sample_data():
    """Integration test with sample package data."""
    # Sample packages from a real report
    sample_packages = [
        {
            "source": {
                "source_pm": "apt",
                "source_name": "git",
                "version": "",
                "category": None,
                "meta": {}
            },
            "candidate": None,
            "decision": "manual",
            "notes": None
        },
        {
            "source": {
                "source_pm": "apt",
                "source_name": "docker.io",
                "version": "",
                "category": None,
                "meta": {}
            },
            "candidate": None,
            "decision": "manual",
            "notes": None
        }
    ]
    
    # Test prompt creation
    prompt = create_migration_prompt(sample_packages)
    assert "git (apt)" in prompt
    assert "docker.io (apt)" in prompt
    
    # Test that the prompt is well-formed
    assert "Migrate 2 Ubuntu packages" in prompt
    assert "JSON" in prompt
    assert "installable_packages" in prompt
    assert "unavailable_packages" in prompt
